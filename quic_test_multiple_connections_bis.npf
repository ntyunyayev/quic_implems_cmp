%info
A test script to compare performance of QUIC stacks

This file is intended to be run with NPF

%variables
NB_CLIENTS=[1*8]
NB_CORES={2,4}

%late_variables
key=  ${NPF_ROOT}/server.key
cert= ${NPF_ROOT}/server.cert
=${NPF_ROOT}
DOWNLOAD_SIZE=10000000000

%config
timeout=600
n_runs=3

%init@client
//enabling IRQ balance 
sudo ethtool -L ens1f0 combined 32 && sudo systemctl start irqbalance && sudo /usr/sbin/set_irq_affinity_cpulist.sh 0-31 ens1f0

%init@server
//removing irqbalance, core 2 will handles every interrupt
sudo ethtool -L ens1f0 combined 1 && sudo systemctl stop irqbalance && sudo /usr/sbin/set_irq_affinity_cpulist.sh 2 ens1f0



//--------------
// msquic
//--------------

%msquic:script@server sudo=true
sudo env PATH=$PATH taskset -c $NB_CORES secnetperf -cipher:1 -bind:10.100.0.2

%msquic:script@client sudo=true delay=3
START="$(date +%s.%3N)"
for i in {1..$NB_CLIENTS}
do
   (sudo env PATH=$PATH taskset -c $NB_CORES secnetperf -cipher:1 -TestName:throughput -target:10.100.0.2 -p 4433 -download:$DOWNLOAD_SIZE) &
done
wait
END="$(date +%s.%3N)"
ELAPSED=$(echo "scale=3; $END - $START" | bc)
echo "$DOWNLOAD_SIZE * 8 * $NB_CLIENTS / 1000000000"
RES=$(echo "$DOWNLOAD_SIZE * 8 * $NB_CLIENTS / 1000000000" | bc -l)
echo "RESULT-GOODPUT "$(echo $RES / $ELAPSED | bc -l)


//--------------
// quicly
//--------------

//working
%quicly:script@server sudo=true
sudo env PATH=$PATH taskset -c $NB_CORES cli_quicly -c $cert -k $key 10.100.0.2 4567 -b 20000000000 -G

%quicly:script@client sudo=true delay=3
START="$(date +%s.%3N)"
for i in {1..$NB_CLIENTS}
do
   (sudo env PATH=$PATH cli_quicly 10.100.0.2 4567 -O -b 20000000000 -G -p /$DOWNLOAD_SIZE) &
done
wait
END="$(date +%s.%3N)"
ELAPSED=$(echo "scale=3; $END - $START" | bc)
RES=$(echo "$DOWNLOAD_SIZE * 8 * $NB_CLIENTS / 1000000000" | bc -l)
echo "RESULT-GOODPUT "$(echo $RES / $ELAPSED | bc -l)


//--------------
// quiche
//--------------

//working
%quiche:script@server sudo=true
sudo env PATH=$PATH taskset -c $NB_CORES http3-server -p 4445 -k $key -c $cert

%quiche:script@client sudo=true delay=10
for i in {1..$NB_CLIENTS}
do
(sudo env PATH=$PATH taskset -c $NB_CORES http3-client -G 100000000 -X keys.log 10.100.0.2 4445 | tee ~/out_test$i.quiche | grep -ioE '[0-9.]+ mbps' | awk '{print $1 /1000}' | tee ~/out$i.quiche) &
done
wait
END="$(date -u +%s)"
ELAPSED=$(echo "scale=3; $END - $START" | bc)
RES=$(echo "$DOWNLOAD_SIZE * 8 /1000000000 / $NB_CLIENTS" | BC -l)
echo "RESULT-GOODPUT "$RES

//--------------
// picoquic
//--------------

%picoquic:script@server sudo=true
sudo env PATH=$PATH LD_LIBRARY_PATH=$LD_LIBRARY_PATH taskset -c $NB_CORES dpdk_picoquicdemo --nodpdk -c $cert -k $key -B 1000000000 -p 4443

%picoquic:script@client sudo=true delay=3
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/nikita/dpdk_install_21.11/lib/x86_64-linux-gnu
START="$(date +%s.%3N)"
for i in $( eval echo {1..$NB_CLIENTS} )
do
(sudo env PATH=$PATH LD_LIBRARY_PATH=$LD_LIBRARY_PATH dpdk_picoquicdemo --nodpdk -B 1000000000 -D) &
done
wait
END="$(date +%s.%3N)"
ELAPSED=elapsed=$(echo "scale=3; $END - $START" | bc)
RES=0
for i in $( eval echo {1..$NB_CLIENTS} )
do
   TMP=$(sudo cat ~/out$i.pquic | grep -ioE 'Transferred [0-9.]+' | awk '{print $2}')
   TMP=$(echo "$TMP * 8 / 1000000000" | bc -l)
   RES=$(echo "$RES + $TMP"| bc -l)
done
echo $RES
echo $ELAPSED
echo "RESULT-GOODPUT "$(echo "$RES/$ELAPSED" | bc -l)




//--------------
// picoquic-dpdk
//--------------

%picoquic_dpdk:script@server sudo=true
sudo env PATH=$PATH LD_LIBRARY_PATH=$LD_LIBRARY_PATH dpdk_picoquicdemo --dpdk -l 2-3 -a 0000:18:00.0 -- -c $cert -k $key -p 4443

%picoquic_dpdk:script@client sudo=true delay=3 
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/nikita/dpdk_install_21.11/lib/x86_64-linux-gnu
START="$(date +%s.%3N)"
for i in $( eval echo {1..$NB_CLIENTS} )
do
(sudo env PATH=$PATH LD_LIBRARY_PATH=$LD_LIBRARY_PATH dpdk_picoquicdemo --nodpdk -B 1000000000 -D) &
done
wait
END="$(date +%s.%3N)"
ELAPSED=elapsed=$(echo "scale=3; $END - $START" | bc)
RES=0
for i in $( eval echo {1..$NB_CLIENTS} )
do
   TMP=$(sudo cat ~/out$i.pquic | grep -ioE 'Transferred [0-9.]+' | awk '{print $2}')
   TMP=$(echo "$TMP * 8 / 1000000000" | bc -l)
   RES=$(echo "$RES + $TMP"| bc -l)
done
echo $RES
echo $ELAPSED
echo "RESULT-GOODPUT "$(echo "$RES/$ELAPSED" | bc -l)


//--------------
// H2o
//--------------
%h2o:script@server sudo=true
sudo H2O_ROOT=$NPF_ROOT taskset -c $NB_CORES  h2o -c $NPF_ROOT/h2o_conf.conf

%h2o:script@client sudo=true
echo "RESULT-GOODPUT "$(wrk -t8 -c8 -d10s https://10.100.0.2:8081/index.html | grep 'Transfer/sec' | awk '{print $2}' | rev | cut -c3- | rev)

